//Done using Recursion
//https://leetcode.com/problems/subsets/
class Solution {
public:
    
     void sqs(int ind,vector<vector<int> > &vec,vector <int> &ds,vector<int>&nums,int n){
         if (ind==n)
         {
                 vec.push_back(ds);
                  return;
         }
        
         ds.push_back(nums[ind]);   //take or pick the particular index into the subsequence  
         sqs(ind+1,vec,ds,nums,n);
         ds.pop_back();
          //not pick or not take condition this element is not added to your subsequence 
         sqs(ind+1,vec,ds,nums,n); 
     }
    
    
    vector<vector<int>> subsets(vector<int>& nums) 
    {
       int n=nums.size();
        vector <int> ds;
        vector<vector<int> > vec;
        sqs(0,vec,ds,nums,n);
        return vec;
    }  
};
