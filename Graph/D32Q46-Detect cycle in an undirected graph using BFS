//https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1/#

Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. 

Example 1:

Input:   

Output: 1
Explanation: 1->2->3->4->1 is a cycle.
Example 2:

Input: 

Output: 0
Explanation: No cycle in the graph.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function isCycle() which takes 
V denoting the number of vertices and adjacency list as input parameters and returns a boolean value denoting 
if the undirected graph contains any cycle or not, return 1 if a cycle is present else return 0.

NOTE: The adjacency list denotes the edges of the graph where edges[i][0] and edges[i][1] represent an edge.

 

Expected Time Complexity: O(V + E)
Expected Space Complexity: O(V)




class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool checkcycle(int s, int V, vector<int> adj[], vector<int>&vis){
        queue<pair<int,int>> q;
        vis[s]=1;
        q.push({s,-1});
        
        while(!q.empty()){
            int node = q.front().first;
            int prev= q.front().second;
            q.pop();
            for(auto it:adj[node]){
                if(!vis[it]){
                    q.push({it,node});
                    vis[it]=1;
                }else
                if(prev!=it)
                return true;
            }
            
        }
         return false;   
        
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> vis(V+1,0);
        for(int i=0;i<V;i++){
            if(!vis[i])
            if(checkcycle(i,V,adj,vis)) return true;
        }
        return false;
    }
    
};

