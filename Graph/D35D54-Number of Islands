//https://leetcode.com/problems/number-of-islands/

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

// will be solved using concept of DFS

class Solution {
public:
     void markIsland(vector<vector<char>> &matrix,int x,int y,int row,int col){
             
         if(x>=row || y>=col || x<0 || y<0 || (matrix[x][y] != '1')) // condition (matrix[x][y] != '1') , write this in the last only as it will give error
           return;                                                     // because before checking condition x or y can be negative 
             
           matrix[x][y]='2';
         
           markIsland(matrix,x,y-1,row,col);
           markIsland(matrix,x,y+1,row,col);
           markIsland(matrix,x-1,y,row,col);
           markIsland(matrix,x+1,y,row,col);
   	}
    
    int numIslands(vector<vector<char>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
        int no_of_islands=0;
        if(row == 0) 
           return 0;
        
        for(int i=0;i<row;i++){
           for(int j=0;j<col;j++){

              if(grid[i][j]=='1'){
                  markIsland(grid,i,j,row,col);
                  no_of_islands++;
                }
          }
      }
        
     return no_of_islands;
    }
};

T.C.- O(N)
