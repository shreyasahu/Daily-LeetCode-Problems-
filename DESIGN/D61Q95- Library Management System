Code
Enums and Constants:

public enum BookFormat {
  HARDCOVER,
  PAPERBACK,
  AUDIO_BOOK,
  EBOOK,
  NEWSPAPER,
  MAGAZINE,
  JOURNAL
}
public enum BookStatus {
  AVAILABLE,
  RESERVED,
  LOANED,
LOST }
public enum ReservationStatus{
  WAITING,
  PENDING,
  CANCELED,
NONE }
public enum AccountStatus{
  ACTIVE,
  CLOSED,
  CANCELED,
  BLACKLISTED,
  NONE
}
public class Address {
  private String streetAddress;
  private String city;
  private String state;
  private String zipCode;
  private String country;
}
public class Person {
  private String name;
  private Address address;
  private String email;
  private String phone;
}
public class Constants {
  public static final int MAX_BOOKS_ISSUED_TO_A_USER = 5;
  public static final int MAX_LENDING_DAYS = 10;
}
Account, Member, and Librarian

// For simplicity, we are not defining getter and setter functions.
// assume that all class attributes are private and accessed through
// public getter methods and modified only through their public methoods
public abstract class Account {
  private String id;
  private String password;
  private AccountStatus status;
  private Person person;
  public boolean resetPassword();
}
public class Librarian extends Account {
  public boolean addBookItem(BookItem bookItem);
  public boolean blockMember(Member member);
  public boolean unBlockMember(Member member);
}
public class Member extends Account {
  private Date dateOfMembership;
  private int totalBooksCheckedout;
  public int getTotalBooksCheckedout();
  public boolean reserveBookItem(BookItem bookItem);
  private void incrementTotalBooksCheckedout();
  public boolean checkoutBookItem(BookItem bookItem) {
    if (this.getTotalBooksCheckedOut() >= Constants.MAX_BOOKS_ISSUED
      ShowError("The user has already checked-out maximum number of
      return false;
    }
    BookReservation bookReservation = BookReservation.fetchReservati
    if (bookReservation != null && bookReservation.getMemberId() !=
      // book item has a pending reservation from another user
      ShowError("This book is reserved by another member");
      return false;
    } else if (bookReservation != null) {
      // book item has a pending reservation from the give member
      bookReservation.updateStatus(ReservationStatus.COMPLETED);
    }
    if (!bookItem.checkout(this.getId())) {
      return false;
  }
  this.incrementTotalBooksCheckedout();
  return true;
}
private void checkForFine(String bookItemBarcode) {
  BookLending bookLending = BookLending.fetchLendingDetails(bookIt
  Date dueDate = bookLending.getDueDate();
  Date today = new Date();
  // check if the book has been returned within the due date
  if (today.compareTo(dueDate) > 0) {
    long diff = todayDate.getTime() - dueDate.getTime();
    long diffDays = diff / (24 * 60 * 60 * 1000);
    Fine.collectFine(memberId, diffDays);
} }
public void returnBookItem(BookItem bookItem) {
  this.checkForFine(bookItem.getBarcode());
  BookReservation bookReservation = BookReservation.fetchReservati
  if (bookReservation != null) {
    // book item has a pending reservation
    bookItem.updateBookItemStatus(BookStatus.RESERVED);
    bookReservation.sendBookAvailableNotification();
}
  bookItem.updateBookItemStatus(BookStatus.AVAILABLE);
}
public bool renewBookItem(BookItem bookItem) {
  this.checkForFine(bookItem.getBarcode());
  BookReservation bookReservation = BookReservation.fetchReservati
  // check if this book item has a pending reservation from anothe
  if (bookReservation != null && bookReservation.getMemberId() !=
    ShowError("This book is reserved by another member");
    member.decrementTotalBooksCheckedout();
    bookItem.updateBookItemState(BookStatus.RESERVED);
    bookReservation.sendBookAvailableNotification();
    return false;
  } else if (bookReservation != null) {
    // book item has a pending reservation from this member
    bookReservation.updateStatus(ReservationStatus.COMPLETED);
  }
  BookLending.lendBook(bookItem.getBarCode(), this.getMemberId());
  bookItem.updateDueDate(LocalDate.now().plusDays(Constants.MAX_LENDING_DAYS));
  return true;
  }
}
BookReservation, BookLending, and Fine:

public class BookReservation {
  private Date creationDate;
  private ReservationStatus status;
  private String bookItemBarcode;
  private String memberId;
  public static BookReservation fetchReservationDetails(String barcode);
}
public class BookLending {
  private Date creationDate;
  private Date dueDate;
  private Date returnDate;
  private String bookItemBarcode;
  private String memberId;
  public static void lendBook(String barcode, String memberId);
  public static BookLending fetchLendingDetails(String barcode);
}
public class Fine {
  private Date creationDate;
  private double bookItemBarcode;
  private String memberId;
  public static void collectFine(String memberId, long days) {}
}
BookItem:

public abstract class Book {
  private String ISBN;
  private String title;
  private String subject;
  private String publisher;
  private String language;
  private int numberOfPages;
  private List<Author> authors;
}
public class BookItem extends Book {
  private String barcode;
  private boolean isReferenceOnly;
  private Date borrowed;
  private Date dueDate;
  private double price;
  private BookFormat format;
  private BookStatus status;
  private Date dateOfPurchase;
  private Date publicationDate;
  private Rack placedAt;
  public boolean checkout(String memberId) {
    if(bookItem.getIsReferenceOnly()) {
      ShowError("This book is Reference only and can't be issued");
      return false;
    }
    if(!BookLending.lendBook(this.getBarCode(), memberId)){
      return false;
    }
    this.updateBookItemStatus(BookStatus.LOANED);
    return true;
} }
public class Rack {
  private int number;
  private String locationIdentifier;
}
Search interface and Catalog:

public interface Search {
  public List<Book> searchByTitle(String title);
  public List<Book> searchByAuthor(String author);
  public List<Book> searchBySubject(String subject);
  public List<Book> searchByPubDate(Date publishDate);
}
public class Catalog implements Search {
  private HashMap<String, List<Book>> bookTitles;
  private HashMap<String, List<Book>> bookAuthors;
  private HashMap<String, List<Book>> bookSubjects;
  private HashMap<String, List<Book>> bookPublicationDates;
  public List<Book> searchByTitle(String query) {
    // return all books containing the string query in their title.
    return bookTitles.get(query);
}
  public List<Book> searchByAuthor(String query) {
    // return all books containing the string query in their author'
    return bookAuthors.get(query);
} }
=================================================================================================================================================
class Library {

	String name;
	Address location;
	List<BookItem> books;
}

class Book {

	String uniqueIdNumber;
	String title;
	List<Author> authors;
	BookType bookType;
}

class BookItem extends Book {

	String barcode;
	Date publicationDate;
	Rack rackLocation;
	BookStatus bookStatus;
	BookFormat bookFormat;
	Date issueDate;
}

class Address {

	int pinCode //ZipCode
	String street;
	String city;
	String state;
	String country;
}

public enum BookType {

	SCI_FI, ROMANTIC, FANTASY, DRAMA;
}

public enum BookFormat {

	HARDCOVER, PAPERBACK, NEWSPAPER, JOURNAL;
}

public enum BookStatus {

	ISSUED, AVAILABLE, RESERVED, LOST;
}

class Rack {

	int number;
	String locationId;

}

class Person {

	String firstName;
	String lastName;

}

class Author extends Person {

	List<Book> booksPublished;

}

class SystemUser extends Person {

	String Email;
	String phoneNumber;
	Account account;
}

class Member extends SystemUsers {

	int totalBookCheckedOut;

	Search searchObj;
	BookIssueService issueService;

}

class Librarian extends SystemUsers {

	Search searchObj;
	BookIssueService issueService;

	public void addBookItem(BookItem bookItem);
	public BookItem deleteBookItem(String barcode); 
	public BookItem editBookItem(BookItem bookItem);
}

class Account {

	String userName;
	String password;
	int accountId;
}

class Search {

	public List<BookItem> geBookByTitle(String title);
	public List<BookItem> geBookByAuthor(Author author);
	public List<BookItem> geBookByType(BookType bookType);
	public List<BookItem> geBookByPublicationDate(Date publicationDate);

}

class BookIssueService {

	Fine fine;

	public BookReservationDetail getReservationDetail(BookItem book);

	public void updateReservationDetail(BookReservationDetail bookReservationDetail);

	public BookReservationDetail reserveBook(BookItem book, SystemUser user);

	public BookIssueDetail issueBook(BookItem book, SystemUser user);

	// it will internaly call the issueBook function after basic validations
	public BookIssueDetail renewBook(BookItem book, SystemUser user); 

	public void returnBook(BookItem book, SystemUser user);

}

class BookLending {

	BookItem book;
	Date startDate;
	SystemUser user;
}

class BookReservationDetail extends BookLending {

	ReservationStatus reservationStatus;

}

class BookIssueDetail extends BookLending {

	Date dueDate;

}

class Fine {

	Date fineDate;
	BookItem book;
	SystemUser user;

	public double calculateFine(int days);
}

