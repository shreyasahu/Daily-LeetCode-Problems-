//https://leetcode.com/problems/3sum/

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []


Solution-
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
         int n=nums.size(),target=0;
         vector<vector<int>> ans;
        
         for(int i=0;i<n-2;i++)
        {
          
         if(i==0||(i>0 && nums[i]!=nums[i-1])){      //processing duplicates of i
             int left=i+1,right=n-1;
            while(left<right)
            {
                 
                int sum=nums[left]+nums[right];
                if(sum<target-nums[i])
                    left++;
                else if (sum>target-nums[i])
                    right--;
                else
                {
                    vector<int> s={nums[i],nums[left],nums[right]};
                    ans.push_back(s);
                    while(left<right && nums[left]==s[1])  {left++;}          //processing duplicates of left
                    while(left<right && nums[right]==s[2]) { right--;}         //processing duplicates of right
                    // left++; right--;
                }
             }
         }
            
        }
        return ans;
    }
};


T.C. - O(n2)
S.C- O(1)

