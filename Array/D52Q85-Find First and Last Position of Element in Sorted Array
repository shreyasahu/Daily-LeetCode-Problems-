//https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109



class Solution {
public:
    //bs function gives the min index 
    int bs(vector<int>& nums,int target){
        int l=0,r=nums.size()-1;
        while(l<=r){
            int mid=l+((r-l)/2);
            if(nums[mid]<target)
                l=mid+1; //right side 
            else 
                r=mid-1; //consider left side 
        }
        return l;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        int idx=bs(nums,target);
        int idx2 = bs(nums,target+1)-1;  //since bs function gives min index so by increasing target by 1 , will get max index of target 
        if((idx<nums.size()) &&(nums[idx]==target))
            return {idx,idx2};
        else
            return {-1,-1};
    }
};

T.C- O(logn)
