//https://leetcode.com/problems/find-the-duplicate-number/

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2

//Solution Approach - Tortoise method (linked list finding loop concept)
// When slow and fast pointer collide , they will stop moving then take first pointer at first number then move the fast pointer 
// and slow pointer both by 1 step then that will be the duplicate number.

//Proof -
 f -> ->
 s -> 
 Since there is a duplicate number then there will definately be a collision then
                  
        /     o (1st point of collision)
     a      /   |
  /        /  (a-x)
 o ---> o (duplicate number)
  (starting point)
   <---x--->

s -> a
f -> 2a (multiple of length of cycle)

fast and slow pointer are meeting at any point on the cycle and they will only meet if the difference between slow and 
fast pointer is a multiple of the length of the cycle .

a --> nc  (c is the length of the cycle)
-----------------------------------------------------------------------
Approach-2 - num of n numbers - n(n+1)/2-sum of array elements -THIS APPROACH WON'T WORK AND WILL FAIL FOR 
TESTCASE - [2,2,2,2,2,2]
RETURN 2 so here this approach won't work 

--------------------------------------------------------------------------------------------------
class Solution {
public:
    int findDuplicate(vector<int>& nums) 
    {
      int slow=nums[0],fast=nums[0];
     do
      {
          slow=nums[slow];
          fast=nums[nums[fast]];
      }while(slow!=fast);
        
      fast=nums[0];
     while(slow!=fast)
      {
         slow=nums[slow];
         fast=nums[fast];
      }
        
     return slow;
     
    }
};

Time complexity =   O(N)
Space Complexity = O(1)

