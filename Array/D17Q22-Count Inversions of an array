https://www.hackerrank.com/challenges/ctci-merge-sort/problem

Given an array of integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. 
If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
 

Example 1:

Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).
Example 2:

Input: N = 5
arr[] = {2, 3, 4, 5, 6}
Output: 0
Explanation: As the sequence is already 
sorted so there is no inversion count.
Example 3:

Input: N = 3, arr[] = {10, 10, 10}
Output: 0
Explanation: As all the elements of array 
are same, so there is no inversion count.

Solution- 

//Using merge sort 
//TC- O(nlogn)
//SC-O(n)

long merge (vector<int> & arr,long temp[],long left,long mid,long right)
 {
     long inv_count=0;
     long i,j,k;
     i=left;
     j=mid;
     k=left;
     
     while(i<=mid-1 && j<=right)
     {
         if(arr[i]<=arr[j])
         {
             temp[k++]=arr[i++];
         }
         else{
             temp[k++]=arr[j++];
             inv_count= inv_count+mid-i;
         }
     }
     
     while (i<=mid-1)
     temp[k++]=arr[i++];
     
     while(j<=right)
     temp[k++]=arr[j++];
     
     for(long i=left;i<=right;i++)
     arr[i]=temp[i];
     
     return inv_count;
 }
 long mergesort(vector<int> & arr,long temp[],long left,long right)
 {
     long inv_count=0;
     if(left<right)
     {
         long mid=(left+right)/2;
         inv_count += mergesort(arr,temp,left,mid);
         inv_count += mergesort(arr,temp,mid+1,right);
         inv_count += merge(arr,temp,left,mid+1,right);
     }
     return inv_count;
 }

long countInversions(vector<int> arr) 
{
    long temp[arr.size()];
    long ans = mergesort (arr,temp,0,(arr.size()-1));
    return ans;
}
