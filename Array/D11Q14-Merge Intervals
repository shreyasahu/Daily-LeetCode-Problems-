//https://leetcode.com/problems/merge-intervals/

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping 
intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].


class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        vector<vector<int>> mergedintervals;
        if(intervals.size()==0)
            return intervals;
                                                  //intervals=[[1,3],[2,6],[8,10],[15,18]]
        sort(intervals.begin(),intervals.end());  //sort intervals 
        
        vector<int> temp = intervals[0]; // [1,3]
        for(auto it:intervals)           // it[0],it[1] = 13 26 810 1518 
        {
            if(it[0]<=temp[1])    // [[1,3],[2,6],[8,10],[15,18]]  array after sorting 
            {                     // check 2<3 
                temp[1]=max(it[1],temp[1]);  // then merge 
            }
            else
            {
                mergedintervals.push_back(temp);
                temp=it;
            }
            //cout<<it[0]<<it[1]<<" ";
        }
        mergedintervals.push_back(temp);
        return mergedintervals;
    }
};


Time Complexity- O(N log N) + O(N)  (sorting and traversing)
Space complexity- O(N)


