https://leetcode.com/problems/pascals-triangle/

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

         1
        1 1 
       1 2 1 
      1 3 3 1
     1 4 6 4 1 
     
 Solution-
 
 /**
 * @param {number} numRows
 * @return {number[][]}
 */
var generate = function(numRows) 
{
   var arr= new Array();
    for(let i=0;i<numRows;i++)
        {
             arr[i] = new Array(i+1);
             arr[i][0]=arr[i][i]=1;
             for(let j=1;j<(arr[i].length-1);j++)
                {
                    arr[i][j]=arr[i-1][j-1]+arr[i-1][j];
                }
        }
    return arr;
};

C++ SOLUTION-

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> r(numRows);

        for (int i = 0; i < numRows; i++) {
            r[i].resize(i + 1);
            r[i][0] = r[i][i] = 1;
  
            for (int j = 1; j < i; j++)
                r[i][j] = r[i - 1][j - 1] + r[i - 1][j];
        }
        
        return r;
    }
};

TC- O(N2)
SC- O(N2)
=========================================================================
For finding the value of a particular column-

for(int i=0;i<n;i++){
         res=res*(n-i);                     TC -  O(n) SC- O(n)
         res=res/(i+1);
}

for finding the value of a particular cell-

use nCr
r-1 
   C                      4
     c-1                    C      = 4*3/2*1    using this concept 
                              2      
                              
    TC- O(N)
    SC-O(1)
    
    
