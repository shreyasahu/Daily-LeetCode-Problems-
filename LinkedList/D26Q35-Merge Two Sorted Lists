//https://leetcode.com/problems/merge-two-sorted-lists/

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode*head;
        if(!list1 || !list2)
            return (!list1?list2:list1);
        if(list1->val<=list2->val)
        {
            head=list1;
            list1=list1->next;
        }
        else{
            head=list2;
            list2=list2->next;
        }
        
        ListNode*temp=head;
        while(list1 && list2){
            if(list1->val<=list2->val){
                temp->next=list1;
                list1=list1->next;
                temp=temp->next;
            }
            else {
                 temp->next=list2;
                 list2=list2->next;
                 temp=temp->next;
            }
        }
        if(!list1){                        //if list1 got empty directly add the link of list2
            temp->next=list2;
        }
        if(!list2){                        ////if list2 got empty directly add the link of list1
            temp->next=list1;
        }
        
        return head;
            
            
    }
};

