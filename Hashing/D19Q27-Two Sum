https://leetcode.com/problems/two-sum/

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.


Solution-

APPROACH- one by one will take array numbers and will subtract from target, if we get the target value in map then we push indexes in array otherwise we 
insert them.

JAVA SOLUTION ----------------------------------

import java.util.HashMap;
import java.util.Map;

public class Two_Sum {
    public static int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> hm = new HashMap<>();
        int[] res = new int[2];
        for (int i = 0; i < nums.length; i++) {
            if (hm.containsKey(target - nums[i])) {
                res[0] = hm.get(target - nums[i]);
                res[1] = i;
                break;
            } else {
                hm.put(nums[i], i);
            }
        }
        return res;
    }

    public static void main(String[] args) {
        int [] nums = {2,-2,1,1,-2,2,3};
        System.out.println("Answer " +twoSum(nums, 9));
    }
}


Time Complexity - O(N)




-------------------------------------------------------------------------------------------------------------------------------------------

var twoSum = function(nums, target) {
    const map1 = new Map();
    var ans=[];
    for(let i=0;i<nums.length;i++){
       if(map1.has(target-nums[i])){  //checking if the target-nums[i] is present in map
           ans.push(map1.get(target-nums[i])); //pushing indexes to the ans array 
           ans.push(i);
          
       }
         map1.set(nums[i],i);  //inserting  values in array
    }
 
     return ans;
   
};

--------------------------

import java.util.HashMap;

public class TwoSumSolution {
    public static int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(target - nums[i])) { // Checking if target - nums[i] exists in the map
                return new int[]{map.get(target - nums[i]), i}; // Returning the indices
            }
            map.put(nums[i], i); // Storing the number and its index
        }
        
        return new int[]{}; // Returning an empty array if no solution is found
    }
    
    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] result = twoSum(nums, target);
        
        if (result.length == 2) {
            System.out.println("Indices: " + result[0] + ", " + result[1]);
        } else {
            System.out.println("No solution found");
        }
    }
}



T.C.-O(n)
