https://leetcode.com/problems/find-all-anagrams-in-a-string/

Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, 
typically using all the original letters exactly once.

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.

-----------------------------------------------------------------------------------------------------------
SOLUTION APPROACH- SLIDING WINDOW
s = "cbaebabacd", p = "abc"

first will take the size of p and then using sliding window will consider each window size of 3 then
imp thing is when we slide the window , the calculation which we did for previous character, 
will have to revert
in the below code we took count , so that we don't have to traverse the map again and again 
--------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> ans,freq;
        int n=s.size(),j=0,count=0;
        int sz=p.size();
        unordered_map <char,int> mp;
        for(int i=0;i<sz;i++) mp[p[i]]++;
       int  i=0;
        int mapSize=mp.size();
        while(j<n){
            if(j-i+1<=sz){
                mp[s[j]]--;
                 if(mp[s[j]]==0)
                    count++;
                 if (j-i+1==sz && count==mapSize ){
                     ans.push_back(i);
                 } 
                  j++;
            }
            else {
              if(mp[s[i]]==0)   count--;
              if(mp.find(s[i])!=mp.end())  mp[s[i]]++;
              i++; 
        }}
        return ans;
    }
};
