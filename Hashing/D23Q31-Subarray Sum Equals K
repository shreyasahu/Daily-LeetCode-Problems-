https://leetcode.com/problems/subarray-sum-equals-k/

Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 
 
Approach -

Detailed Intuition With Example:

While iterating through the array if we can store the prefixSum at each index in a HashMap and at the same time check 
if a prefixSum exists for the current runningSum-k. we'll use use a HashMap to compute and store the prefix sums as Keys 
and the corresponding frequencies as Values. We'll run through the example step by step -

Input:
    nums = [3,9,-2,4,1,-7]
    k = 5


Step1:
    nums = [3,9,-2,4,1,-7]
            ^
    count = 0
    sum = 3
    map = [3:1]
    k = 5

    # 1 (i.e., runningSum-k, 3-5=-2) not found in map
    # add the curr sum 3 in map

Step2:
    nums = [3,9,-2,4,1,-7]
              ^
    count = 0
    sum = 12
    map = [3:1, 12:1]

    # 0 (12-5) not found in map
    # add the curr sum 12 in map

Step3:
    nums = [3,9,-2,4,1,-7]
                 ^
    count = 0
    sum = 10
    map = [3:1, 12:1, 10:1]

    # 7 (10-5) not found in map
    # add the curr sum 10 in map

Step4:
    nums = [3,9,-2,4,1,-7]
                   ^
    count = 0
    sum = 14
    map = [3:1, 12:1, 10:1, 14:1]

    # 4 (14-5) not found in map.
    # add the curr sum 14 in map

Step5:
    nums = [3,9,-2,4,1,-7]
                     ^
    count = 1
    sum = 15
    map = [3:1, 12:1, 10:1, 14:1 , 15:1]

    # 5 (15-5) found in map . Increment the count
	#add cur sum 15 in map
	
Step 6:
    nums = [3,9,-2,4,1,-7]
                        ^
    count = 2
    sum = 8
    map = [3:1, 12:1, 10:1, 14:1 , 15:1,8:1]

    # 6 (8-5) found in map . Increment the count
    #add cur sum 8 in map
 
 
---------------------------------------------------------------------------------------------- 

Testcase - For understanding map1[sum-k]
[3,4,7,2,-3,1,4,2,1] k=7
3:1
7:1  count=1
14:1  count=2  => 14:2  count=3   =. 14:3 Count=6
16:1  count=2
13:1  count=2 => 13:2 count=5
now we need to increase the count of 14 means 14:2
18:1 count=4
20:1 
21:1 
------------------------------------------------------
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int sum=0,count=0;
        unordered_map<int,int> map1;
        map1[sum]=1;  // we are assigning map1[0]=1 bcoz when sum-k=0 (means when the difference will come zero, means k is achieved but 0 won't)
       for(int i=0;i<nums.size();i++){                  // be present in the array that time for counting that count we need to assign map[0]=1
           sum=sum+nums[i];
           if(map1.find(sum-k)!=map1.end()){
               count+=map1[sum-k];
           }
               map1[sum]++;
       }
        return count;
    }
    
};

Time Complexity-  O(N)
Space Complexity- O(N)
