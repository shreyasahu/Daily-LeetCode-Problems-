//https://leetcode.com/problems/permutations/
//https://leetcode.com/problems/permutations/
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

//Here we are maintain a freq array for keeping the track if the element is used before 

class Solution {
public:
    
    void permt(vector<vector<int>> &ans,vector<int> &ds,vector<int> &nums, int freq[]){
        
        if(ds.size()==nums.size()){
            ans.push_back(ds);
            return;
        } 
        for(int i=0;i<nums.size();i++){
            if(!freq[i]){
                ds.push_back(nums[i]);
                freq[i]=1;
                permt(ans,ds,nums,freq);
                ds.pop_back();
                freq[i]=0;
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> ds;
        int freq[nums.size()];
        for(int i=0;i<nums.size();i++)
            freq[i]=0;
        permt(ans,ds,nums,freq);
        return ans;
    }
};
