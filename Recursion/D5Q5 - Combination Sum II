// https://leetcode.com/problems/combination-sum-ii/

// Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

=========================================================================================================================
class Solution {
public:
    
    void sqs(int ind, vector<vector<int>> &ans,vector<int> &ds,vector<int> &candidates,int target)
    {
        if (target==0)
        {
            ans.push_back(ds);
            return;
        }
        
        for(int i=ind;i<candidates.size();i++)
        {
            if(i>ind && candidates[i]==candidates[i-1]) continue;                           
            if (candidates[i]>target) break;
           ds.push_back(candidates[i]);
           sqs(i+1,ans,ds,candidates,target-candidates[i]); 
           ds.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) 
    {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> ans;
        vector<int> ds;
        sqs(0,ans,ds,candidates,target);
        return ans;
    }
};

---------------------------------------------------------

JAVA CODE -

class Solution {

    void uniqueComb(int ind, int[] candidates, int target, int l, List<Integer> list, Set<List<Integer>> ans){
            if(target == 0){
                ans.add(new ArrayList<>(list));
            return;
        }
       
       for(int i=ind;i<l;i++){
        if(i>ind && candidates[i]==candidates[i-1]) continue;
        if(candidates[i]>target) break;
        
        list.add(candidates[i]);
        uniqueComb(i+1,candidates,target-candidates[i],l,list,ans);
        list.remove(list.size()-1);
       }

    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Set<List<Integer>> ans= new HashSet<>();
        Arrays.sort(candidates);
        uniqueComb(0,candidates,target,candidates.length,new ArrayList<>(),ans);
        List<List<Integer>> anslist  = new ArrayList<>(ans);
        return anslist;
    }
}


--------------------------------------------------------------
