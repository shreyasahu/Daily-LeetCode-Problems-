https://leetcode.com/problems/ones-and-zeroes/

You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
 

Constraints:

1 <= strs.length <= 600
1 <= strs[i].length <= 100
strs[i] consists only of digits '0' and '1'.
1 <= m, n <= 100


class Solution {
public:
   void countOfNo(string str,int &zero,int &one){
      
        for(int i=0;i<str.size();i++){
            if(str[i]=='0') zero++;
            else one++;                
        }
    }
    
    int dpFn(int index,int m,int n, vector<pair<int,int>> &v,vector<vector<vector<int>>> &dp){
        
        if(index==-1 || (m<=0 && n<=0))
            return 0;
        if(dp[m][n][index]!=-1)
            return dp[m][n][index];
        int nonpick=dpFn(index-1,m,n,v,dp);
        int pick=INT_MIN;
        if(m>=v[index].first && n>=v[index].second)
            pick=1+dpFn(index-1,m-v[index].first,n-v[index].second,v,dp);
        return dp[m][n][index]=max(nonpick,pick);
    }
    
    int findMaxForm(vector<string>& strs, int m, int n) {
         vector<pair<int,int>> v;
        
        for(int i=0;i<strs.size();i++){
             int zero=0,one=0;
            countOfNo(strs[i],zero,one);
            v.push_back({zero,one});
        }
         vector<vector<vector<int>>>dp (m+1, vector<vector<int>>(n+1, vector<int>(v.size(),-1)));
         return dpFn(strs.size()-1,m,n,v,dp);
    }
};

-------------------------------------------------------------------------------------------------
RECURSION CODE WHICH WILL GIVE TLE

class Solution {
public:
    
   void countOfNo(string str,int &zero,int &one){
        for(int i=0;i<str.size();i++){
            if(str[i]=='0') zero++;
            else one++;                
        }
    }
    
    int dpFn(int index,int m,int n, vector<pair<int,int>> &v){
        
        if(index==-1 || (m<=0 && n<=0))
            return 0;
        int nonpick=dpFn(index-1,m,n,v);
        int pick=INT_MIN;
        if(m>=v[index].first && n>=v[index].second)
            pick=1+dpFn(index-1,m-v[index].first,n-v[index].second,v);
        return max(nonpick,pick);
    }
    
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<pair<int,int>> v;
       
        //vector<vector<int>> dp(m,vector<int>(n+1));
        for(int i=0;i<strs.size();i++){
             int zero=0,one=0;
            countOfNo(strs[i],zero,one);
            v.push_back({zero,one});
        }
        return dpFn(strs.size()-1,m,n,v);
    }
};

