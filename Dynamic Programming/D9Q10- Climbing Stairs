//https://leetcode.com/problems/climbing-stairs/

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

//Dp Memoization

class Solution {
public:
    
    int dpf(int n,vector<int> &dp)
    {
        if(n<=2)
            return n;
        if(dp[n]!=-1)
            return dp[n];
        return (dp[n]=dpf(n-1,dp)+dpf(n-2,dp));
    }
    
    
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
       return  dpf(n,dp);
            
    }
};


// Time complexity- O(N)
//Space Complexity- O(N)+O(N)



//Dp Tabulization
class Solution {
public:

    int climbStairs(int n) {
        int dp[n+3];
        dp[0]=0,dp[1]=1,dp[2]=2;
        for(int i=3;i<=n;i++)
        {
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};

// Time complexity- O(N)
//Space Complexity- O(N)

Space Optimization same as fibonacci number 
