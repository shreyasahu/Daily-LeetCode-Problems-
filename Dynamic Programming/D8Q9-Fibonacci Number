//https://leetcode.com/problems/fibonacci-number/

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, 
starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.


//Dynamic Programming 
//Memoization Approach 

class Solution {
public:
    int dpf(int n, vector<int> &dp)
    {
        if (n<=1)
            return n;
        if(dp[n]!=-1)
            return dp[n];
         
            return dp[n]=dpf(n-1,dp)+dpf(n-2,dp);
        
    }
    int fib(int n) 
    {
       vector <int> dp(n+1,-1);
        int ans=dpf(n,dp); 
        return ans;
    }
};

Time Complexity - O(N)
Space Complexity - O(N)+O(N) (recursion stack + Array)


// Tabulation Approach 

class Solution {
public:
    int fib(int n) {
        int dp[n+2];  // 1 extra to handle case n=0 , if will take n+1 then dp[1]=1 will give error in case of n=0
        memset(dp,-1,sizeof(dp));
        dp[0]=0, dp[1]=1;
        for(int i=2;i<=n;i++)
        {
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};

Time Complexity - O(N)
Space Complexity - O(N) only (No recursion stack Space)

// Space Optimization

class Solution {
public:
    int fib(int n) {
        if(n==0)
            return 0;
        int prev=1,prev2=0,curr_i=0;
        for(int i=2;i<=n;i++)
        {
            curr_i=prev+prev2;
            prev2=prev;
            prev=curr_i;
        }
        return prev;
    }
};

Time Complexity - O(N)
Space Complexity - O(1)


