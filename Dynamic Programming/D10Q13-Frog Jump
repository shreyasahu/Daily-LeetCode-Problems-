//https://bit.ly/3JPcoOx

Problem Statement
There is a frog on the 1st step of an N stairs long staircase. The frog wants to reach the Nth stair. HEIGHT[i] is the height of the (i+1)th stair.
If Frog jumps from ith to jth stair, the energy lost in the jump is given by |HEIGHT[i-1] - HEIGHT[j-1] |.In the Frog is on ith staircase, he can jump 
either to (i+1)th stair or to (i+2)th stair. Your task is to find the minimum total energy used by the frog to reach from 1st stair to Nth stair.
For Example
If the given ‘HEIGHT’ array is [10,20,30,10], the answer 20 as the frog can jump from 1st stair to 2nd stair (|20-10| = 10 energy lost) 
and then a jump from 2nd stair to last stair (|10-20| = 10 energy lost). So, the total energy lost is 20.
Input Format:
The first line of the input contains an integer, 'T,’ denoting the number of test cases.

The first line of each test case contains a single integer,' N’, denoting the number of stairs in the staircase,

The next line contains ‘HEIGHT’ array.
Output Format:
For each test case, return an integer corresponding to the minimum energy lost to reach the last stair.


APPROACH-

Frog jumps to either 1 step or to 2 steps 
arr=[10,20,30,10]

                                      F(3,0)
                                  /          \
                                F(2,20)      F(1,10)
                             /      \        /      \
                        F(0,40)   F(1,30)  F(0,10)   -             on left side of the tree both are 40 and 40 so will return 40 and left side will return 20 so min is 20 
                                     |        |
                                  F(0,40)   F(0,10)                 
                              
                                  
                                  
 // Memoization Approach
 
#include<bits/stdc++.h>
int fnx(int ind,vector<int> &heights, vector<int> &dp)
{
     if(ind==0)
        return 0;
    if(dp[ind]!=-1)
        return dp[ind];
    int left = fnx(ind-1,heights,dp)+abs(heights[ind]-heights[ind-1]);
    int right= INT_MAX;
    if(ind>1)
    right=fnx(ind-2,heights,dp)+abs(heights[ind]-heights[ind-2]);
    return(dp[ind]=min(left,right));
};

int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n+1,-1);
    return fnx(n-1,heights,dp);
}

//Tabulization Approach 

#include<bits/stdc++.h>
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int> dp(n,0);
    dp[0]=0;
    for(int i=1;i<heights.size();i++)
    {
        int fs=dp[i-1]+abs(heights[i]-heights[i-1]);
        int ss=INT_MAX;
        if(i>1)
        ss=dp[i-2]+abs(heights[i]-heights[i-2]);
        dp[i]=min(fs,ss);
    }
    return(dp[n-1]);
}

//Space optimization

                    dp[i-2]  dp[i-1]   dp[i]
          dp[i-2]  dp[i-1]   dp[i]              prev  i
dp[i-2]  dp[i-1]   dp[i]                         |    |     
 0           1       2     3    4   5 ......... n-1,  n  


#include<bits/stdc++.h>
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    int prev=0,prev2=0;
    for(int i=1;i<heights.size();i++)
    {
        
        int fs=prev+abs(heights[i]-heights[i-1]);
        int ss=INT_MAX;
        if(i>1)
        ss=prev2+abs(heights[i]-heights[i-2]);
        int curri=min(fs,ss);
        prev2=prev;
        prev=curri;
        
    }
    return(prev);
}

