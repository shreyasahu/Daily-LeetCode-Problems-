https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

--------------------------------------------------------------------------------
SOLUTION --------------

Approach - Here we will be taking the 3d dp array as now we need index,indicator and count (since maximum operation allowed here is 2)
(1 count = 1 Bell and 1 Sell)

class Solution {

    public int calfn(int i, int indicator, int count, int[] prices, int[][][] dp ){
        if(i==prices.length || count==0){
            return 0;
        }
        if(dp[i][indicator][count]!=-1) return dp[i][indicator][count];
         int buysell=0;
        if(indicator==0){
             buysell = -prices[i]+calfn(i+1,1,count,prices,dp);
        }else{
             buysell= prices[i]+calfn(i+1,0,count-1,prices,dp);
        }
        int skip = calfn(i+1,indicator,count,prices,dp);
        return dp[i][indicator][count]=Math.max(buysell,skip);
    }

    public int maxProfit(int[] prices) {
        int[][][]dp = new int[prices.length][2][3];
        for(int [][] matrix:dp){
            for(int[]rows:matrix) Arrays.fill(rows, -1);
        }
        return calfn(0,0,2,prices,dp);
    }
}


