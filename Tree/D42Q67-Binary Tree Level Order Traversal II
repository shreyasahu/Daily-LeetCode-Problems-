https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

Given the root of a binary tree, return the bottom-up level order traversal of its
nodes' values. (i.e., from left to right, level by level from leaf to root).

Example 1:

        3
    9        20
null null  15  7 

Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void findLevelOrderBottom(TreeNode root, List<List<Integer>> ans){
        if(root == null) return ;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){  
           int n = q.size();
           List<Integer> row = new ArrayList<>();
           for(int i=0;i<n;i++){
            TreeNode top = q.poll();
             if(top.left != null){
                q.add(top.left);
             }
             if(top.right != null){
                q.add(top.right);
             }
             row.add(top.val);
           }
           ans.add(row);
        }
    }

    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        findLevelOrderBottom(root, ans);
        Collections.reverse(ans);
        return ans;
    }
}



--------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void traversal(TreeNode* root,int level, vector<vector<int>> &ans){
         if(!root)
            return;
        if(level>=ans.size()) ans.push_back(vector<int>());
         traversal(root->left,level+1,ans);
         traversal(root->right,level+1,ans);
         ans[level].push_back(root->val);
     }
    
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> ans;
        traversal(root,0,ans);
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
