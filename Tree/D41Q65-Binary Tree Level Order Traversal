https://leetcode.com/problems/binary-tree-level-order-traversal/

Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

JAVA SOLUTION -----

Using queue -

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void findUsingQueue(TreeNode root, List<List<Integer>> ans){
        if(root == null) return;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            List<Integer> level = new ArrayList<>();
            int n = q.size();
            for(int i=0;i<n;i++){
                TreeNode top = q.poll();
                if(top.left != null){
                    q.add(top.left);
                }
                if(top.right != null){
                    q.add(top.right);
                }
                level.add(top.val);
            }
            ans.add(level);
        }

    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        findUsingQueue(root, ans);
        return ans;
    }
}


RECURSIVE APPROACH --

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public void findLevelOrder(int level, TreeNode root, List<List<Integer>> ans){
        if(root==null) return;
        if(level==ans.size()){
            ans.add(new ArrayList<>());
        }
        ans.get(level).add(root.val);
        findLevelOrder(level+1, root.left, ans);
        findLevelOrder(level+1, root.right, ans);
    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        findLevelOrder(0, root, ans);
        return ans;
    }
}



-----------------------------------------------------------------------------------------------------
C++ Solution -

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:

    vector<vector<int>> levelOrder(TreeNode* root) {
         vector<vector<int>> ans;
        if(!root)
            return ans ;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){    
            vector<int> level;
            int n=q.size();
            for(int i=0;i<n;i++){
               TreeNode* top=q.front();
               q.pop();
               if(top->left) q.push(top->left);
               if(top->right) q.push(top->right);
               level.push_back(top->val);
           }
            ans.push_back(level);
        }
        return ans;
    }
};

solution-2 (RECURSION)

  void build(TreeNode* n, vector<vector<int>>& R, int d) {
        if (!n) return;
        if (d == R.size()) R.push_back(vector<int>());
        R[d].push_back(n->val);
        build(n->left, R, d + 1);
        build(n->right, R, d + 1);
    }
    
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> R;
        build(root, R, 0);
        return R;
    }
};

