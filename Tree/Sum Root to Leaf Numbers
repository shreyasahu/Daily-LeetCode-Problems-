https://leetcode.com/problems/sum-root-to-leaf-numbers

You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 

Example 1:


Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        return calculateSum(root, 0);
    }

    public int calculateSum(TreeNode root, int sum){
        if(root == null)
        return 0;

        sum = sum * 10 + root.val;
        if(root.left == null && root.right == null) return sum;
        return calculateSum(root.left, sum) + calculateSum(root.right, sum);
    }
}


-------------------------------------------------------------

class Solution {

    public void generateNumbers(TreeNode root, List<String> numbers, String num){

        if(root == null) return;

        if(root.left == null && root.right == null){
            num = num + Integer.toString(root.val);
            numbers.add(new String(num));
            return;
        }
        num = num + Integer.toString(root.val);
        generateNumbers(root.left,numbers,num);
        generateNumbers(root.right,numbers,num);

    }
    public int sumNumbers(TreeNode root) {
        List<String> numbers = new ArrayList<>();
        generateNumbers(root, numbers, "");
        // numbers.forEach(System.out::println);
        return numbers.stream().mapToInt(Integer::parseInt).sum();
    }
}

