https://leetcode.com/problems/validate-binary-search-tree/

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.



class Solution {
public:
    
    bool isbst(TreeNode* root,TreeNode* minnode,TreeNode* maxnode){
        if(!root)
            return true ;
        if(minnode && root->val<=minnode->val || maxnode  && root->val>=maxnode->val)
            return false;
        return(isbst(root->left,minnode,root) && isbst(root->right,root,maxnode));
    }
    
      bool isValidBST(TreeNode* root) {
        return isbst(root,NULL,NULL);
    }
};

Time Complexity- O(n)

//if we find the inorder traversal of a tree and if that is sorted then that tree is bst

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        TreeNode* prev = NULL;
        return validate(root, prev);
    }
    bool validate(TreeNode* node, TreeNode* &prev) {
        if (node == NULL) return true;
        if (!validate(node->left, prev)) return false;
        if (prev != NULL && prev->val >= node->val) return false; //for checking if the array is sorted 
        prev = node;
        return validate(node->right, prev);
    }
};
