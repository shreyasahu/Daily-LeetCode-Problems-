//https://leetcode.com/problems/longest-substring-without-repeating-characters/

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

SOLUTION-

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
       vector<int> mpp(256,-1);
        int left=0,right=0;
        int n=s.size();
        int len=0;
        while(right<n){
            if(mpp[s[right]]!=-1)
                left=max(mpp[s[right]]+1,left);
            
            mpp[s[right]]=right;
            
            len=max(len,right-left+1);
            right++;
        }
        return len;
    }
};

Time Complexity- O(N)
Space Complexity-O(N)

-----------------------------------------------------------------------

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int left=0,right=0,maxlen=0,len=0;
        set <int> store;
        while(right<s.size()){
            
            if (store.find(s[right]) != store.end()){
                store.erase(s[left]);
                left++; 
            }
             else{
                 store.insert(s[right]);
                 len=(right-left+1);
                 maxlen=max(len,maxlen);
                 right++;
                 }
      }
        return maxlen;
    }
};

Time Complexity-O(2N)
Space Complexity-O(N)
